import asyncio
import re

from telethon import TelegramClient, events
from telethon.tl.types import InputFile

from Entities import *
from UserManager import UserManager, get_payment_string
from exceptions import NoFreeIpAddress
from keyboards import *
from logger import logger
from settings import *


bot = TelegramClient(SESSION, API_ID, API_HASH).start(bot_token=BOT_TOKEN)
manager = UserManager()
manager.create_database_connection()


@bot.on(events.NewMessage(pattern="/start"))
async def start(event):
    user = event.sender
    tg_user: TgUser = TgUser(user.id, user.username, user.first_name, user.last_name, user.phone)
    manager.add_new_user(tg_user)
    if event.sender.first_name is not None:
        user = event.sender.first_name
    elif event.sender.username is not None:
        user = event.sender.username
    else:
        user = "–î—Ä—É–∂–∏—â–µ"
    await event.respond(f"–ü—Ä–∏–≤–µ—Ç, {user}, –¥–∞–≤–∞–π —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN\n\n"
                        f"[INFO] –ë–û–¢ –ù–ê–•–û–î–ò–¢–°–Ø –í –°–¢–ê–î–ò–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø.\n"
                        f"–ü—Ä–æ—Å—å–±–∞ –ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏",
                        buttons=get_keyboard(tg_user.tg_id))
    logger.info(f"{event.sender.id} –Ω–∞–∂–∞–ª /start")


@bot.on(events.NewMessage(pattern=instruction))
async def callback(event):
    await bot.send_message(event.chat_id, "1. –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
                                          "üì± [App Store](https://apps.apple.com/ru/app/wireguard/id1441195209)\n"
                                          "üìû [Google Play](https://play.google.com/store/apps/details?id=com.wireguard"
                                          ".android)\n"
                                          "2. –°–∫–∞—á–∞—Ç—å –≤–∞—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª\n"
                                          "3. –î–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", link_preview=False, buttons=Button.clear())

    p1 = InputFile(id=-5542220640839749743, parts=1, name='import_tunnel.jpg',
                   md5_checksum='87a9b840f3d41ae1514350b1dd8ada54')
    p2 = InputFile(id=-4996295696130465348, parts=1, name='from_file.jpg',
                   md5_checksum='2fb415298a43e43ec0c9f9252708334a')
    p3 = InputFile(id=-1813564566477447057, parts=1, name='allow_vpn.jpg',
                   md5_checksum='dd6da8f0d831140c4ffcaac942786c32')

    result = await bot.send_file(event.chat_id, [p1, p2, p3])
    print(result)

    await event.respond(f"–î–ª—è Android –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞")
    await event.respond(f"–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", buttons=get_keyboard(event.sender.id))

    logger.info(f"{event.sender.id} –Ω–∞–∂–∞–ª –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")


@bot.on(events.NewMessage(pattern=price_button))
async def callback(event):
    user_subscription: UserSubscription = manager.get_subscription_info_by_id(event.peer_id.user_id)
    if user_subscription.price == 2147483647:
        price_message = "–£ –≤–∞—Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n"
    else:
        price_message = f"**–°—Ç–æ–∏–º–æ—Å—Ç—å - {user_subscription.price}—Ä –≤ –º–µ—Å—è—Ü.**\n"

        if user_subscription.end_date is not None:
            price_message += f"**–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {user_subscription.end_date.strftime('%d.%m.%y')}\n"

    await event.respond(f"{price_message}"
                        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ - {user_subscription.max_configs}.\n"
                        f"–ù–∞ –∫–∞–∂–¥–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª.")

    await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=subscribe_keyboard)
    logger.info(f"{event.sender.id} –Ω–∞–∂–∞–ª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")


@bot.on(events.NewMessage(pattern=subscribe))
async def callback(event):
    await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=subscribe_keyboard)
    logger.info(f"{event.sender.id} –Ω–∞–∂–∞–ª –ü–æ–¥–ø–∏—Å–∫–∞")


@bot.on(events.NewMessage(pattern=start_subscribe))
async def callback(event):
    user_subscription: UserSubscription = manager.get_subscription_info_by_id(event.peer_id.user_id)

    if user_subscription.price == 2147483647:
        await event.respond("–£ –≤–∞—Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –Ω–∏—á–µ–≥–æ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ", buttons=subscribe_keyboard)
        return

    if manager.is_user_have_payment_request(event.peer_id.user_id):
        logger.info(f"{event.sender.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É –∑–∞—è–≤–∫—É")
        return await event.respond("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞", buttons=subscribe_keyboard)

    random_string = get_payment_string()
    payment_string = f"{event.peer_id.user_id}/{random_string}"
    date = datetime.datetime.now()

    message = f"ID: {event.message.peer_id.user_id}\n{date.strftime('%d.%m.%y %H:%M:%S')}\n" \
              f"–û–ü–õ–ê–¢–ê: {payment_string}"

    await bot.send_message(SUPPORT_ID, message)
    await event.respond(f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {user_subscription.price} RUB –ø–æ –Ω–æ–º–µ—Ä—É {SBERBANK_NUMBER}, "
                        f"—É–∫–∞–∑–∞–≤ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É", buttons=subscribe_keyboard)
    await event.respond(
        f"{payment_string}", buttons=subscribe_keyboard)
    await event.respond(f"–ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã - –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")

    manager.create_payment_request(event.message.peer_id.user_id, random_string)
    logger.info(f"{event.sender.id} —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É")


@bot.on(events.NewMessage(pattern=configurations))
async def callback(event):
    if not manager.is_user_active(event.peer_id.user_id):
        logger.info(f"{event.sender.id} –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
        return await bot.send_message(event.chat_id, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                                      buttons=get_keyboard(event.peer_id.user_id))
    await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_keyboard)


@bot.on(events.NewMessage(pattern=show_configurations))
async def callback(event):
    configs = manager.get_configs_list_for_user(event.peer_id.user_id)

    if len(configs) == 0:
        logger.debug(f"{event.sender.id} –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —É –Ω–µ–≥–æ –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
        return await bot.send_message(event.chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", buttons=configs_keyboard)

    configs_buttons = [[Button.text(name.split(".conf")[0], resize=True)] for name in configs]
    configs_buttons.append([Button.text("–ù–∞–∑–∞–¥", resize=True)])
    await bot.send_message(event.chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", buttons=configs_buttons)

    while True:
        async with bot.conversation(event.chat_id) as conv:
            await conv.send_message("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª")
            logger.info(f"{event.sender.id} —Å–º–æ—Ç—Ä–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

            try:
                answer = await conv.get_response()
                answer_message = answer.message
            except asyncio.TimeoutError:
                logger.debug(f"{event.sender.id} TimeoutError")
                return await event.respond(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_buttons)

        if answer_message in black_list:
            await event.respond(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_keyboard)
            break
        config, qr_code = manager.create_user_config_by_name(answer_message, event.peer_id.user_id)
        await bot.send_file(event.chat_id, qr_code)
        await bot.send_file(event.chat_id, config)
        logger.info(f"{event.sender.id} –ø–æ–ª—É—á–∏–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª")
        break
    await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_keyboard)


@bot.on(events.NewMessage(pattern=create_new_configuration))
async def callback(event):
    # TODO: –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–≤–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ –æ–¥–∏–Ω
    configs = manager.get_configs_list_for_user(event.peer_id.user_id)
    limit = manager.get_subscription_info_by_id(event.peer_id.user_id)

    if len(configs) == limit.max_configs:
        logger.debug(f"{event.sender.id} –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
        return await bot.send_message(event.chat_id, "–£ –≤–∞—Å —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π",
                                      buttons=configs_keyboard)

    while True:
        async with bot.conversation(event.chat_id) as conv:
            await conv.send_message("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)")

            try:
                answer = await conv.get_response()
                config_name = answer.message
            except asyncio.TimeoutError:
                logger.debug(f"{event.sender.id} TimeoutError")
                return await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_keyboard)

            if config_name in black_list:
                return await event.respond(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_keyboard)

            if len(config_name) >= 254:
                logger.debug(f"{event.sender.id} –≤–≤–µ–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return await event.respond("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ", buttons=configs_keyboard)

            if not re.match(r"^[a-zA-Z0-9]+$", config_name):
                logger.debug(f"{event.sender.id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return await conv.send_message("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã, —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã",
                                               buttons=configs_keyboard)
            break

    try:
        manager.create_new_config(config_name, event.peer_id.user_id)
        logger.info(f"{event.sender.id} —Å–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥")
    except NoFreeIpAddress:
        logger.warning(f"{event.sender.id} NoFreeIpAddress")
        await bot.send_message(SUPPORT_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.peer_id.user_id} –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥,"
                                           f"–∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å IP-–∞–¥—Ä–µ—Å–∞")
        return await event.respond("–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –ø–∏—Å—å–º–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    # TODO: –í—ã–Ω–µ—Å—Ç–∏ —ç—Ç–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    config, qr_code = manager.create_user_config_by_name(config_name, event.peer_id.user_id)
    await bot.send_message(event.chat_id, "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
    await bot.send_file(event.chat_id, qr_code)
    await bot.send_file(event.chat_id, config)
    logger.info(f"{event.sender.id} —Å–æ–∑–¥–∞–ª –∏ –ø–æ–ª—É—á–∏–ª –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª")
    manager.delete_user_config(config_name)
    logger.info(f"{config_name}.conf —É–¥–∞–ª–µ–Ω")

    await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_keyboard)


@bot.on(events.NewMessage(pattern=rename_configuration))
async def callback(event):
    configs = manager.get_configs_list_for_user(event.peer_id.user_id)
    configs_buttons = [[Button.text(name.split(".conf")[0], resize=True)] for name in configs]
    configs_buttons.append([Button.text("–ù–∞–∑–∞–¥", resize=True)])
    await bot.send_message(event.chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è", buttons=configs_buttons)
    logger.info(f'{event.sender.id} —Ä–µ—à–∏–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª')

    while True:
        async with bot.conversation(event.chat_id) as conv:
            await conv.send_message("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª")
            try:
                answer = await conv.get_response()
                old_name = answer.message
                if old_name in black_list:
                    await event.respond(f"–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", buttons=configs_keyboard)
                    break
            except asyncio.TimeoutError:
                await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_keyboard)
                break
        break

    # TODO: –í—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    while True:
        async with bot.conversation(event.chat_id) as conv:
            await conv.send_message("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)")
            try:
                answer = await conv.get_response()
                config_name = answer.message

            except asyncio.TimeoutError:
                logger.debug(f"{event.sender.id} TimeoutError")
                return await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_keyboard)
            if config_name in black_list:
                return await event.respond(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_keyboard)
            if len(config_name) >= 254:
                logger.debug(f"{event.sender.id} –≤–≤–µ–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return await event.respond("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ", buttons=configs_keyboard)
            if not re.match(r"^[a-zA-Z0-9]+$", config_name):
                logger.debug(f"{event.sender.id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return await conv.send_message("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã, —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã",
                                               buttons=configs_keyboard)
        break

    manager.rename_configuration_by_name(old_name, config_name, event.peer_id.user_id)
    await event.respond(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {old_name} —Ç–µ–ø–µ—Ä—å –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è {config_name}", buttons=configs_keyboard)
    logger.info(f"{event.sender.id} –∏–∑–º–µ–Ω–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ —É –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª–∞ {old_name}")


@bot.on(events.NewMessage(pattern=main_menu))
async def callback(event):
    await event.respond(f"–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", buttons=get_keyboard(event.sender.id))
    logger.info(f"{event.sender.id} –ø–æ–ø–∞–ª –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")


@bot.on(events.NewMessage(pattern=payment_requests))
async def callback(event):
    if event.sender.id != ADMIN_ID:
        return await event.respond(f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", buttons=get_keyboard(event.sender.id))

    # –ë–µ—Ä–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
    payments = manager.get_payment_requests()

    payments_keyboard = [[Button.text(f"{payment[0]}/{payment[2]}\n{payment[1].strftime('%d.%m.%y %H:%M:%S')}",
                                      resize=True)] for payment in payments]
    payments_keyboard.append([Button.text("–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", resize=True)])

    while True:
        async with bot.conversation(event.chat_id) as conv:
            await conv.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", buttons=payments_keyboard)

            try:
                answer = await conv.get_response()
                answer_message = answer.message
                break
            except asyncio.TimeoutError:
                return await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=payments_keyboard)

    if answer_message in black_list:
        return await event.respond(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=admin_panel)

    tg_id = answer_message.split("/")[0]
    manager.accept_payment_request(tg_id)
    await event.respond("–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞", buttons=admin_panel)


@bot.on(events.NewMessage(pattern=admin))
async def callback(event):
    if event.sender.id != ADMIN_ID:
        return await event.respond(f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", buttons=get_keyboard(event.sender.id))
    await event.respond(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=admin_panel)


@bot.on(events.NewMessage(pattern="/support"))
async def callback(event):
    async with bot.conversation(event.chat_id) as conv:
        await conv.send_message("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                                buttons=Button.text("–û—Ç–º–µ–Ω–∞", resize=True))
        while True:
            try:
                answer = await conv.get_response()
                if answer.message in black_list:
                    await event.respond(f"–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", buttons=get_keyboard(event.sender.id))
                    break
                answer.date = datetime.datetime.now()
                message = f"ID: {answer.peer_id.user_id}\n{answer.date.strftime('%d.%m.%y %H:%M:%S')}\n" \
                          f"{answer.message}"
                await bot.send_message(SUPPORT_ID, message)
                await event.respond("–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", buttons=get_keyboard(event.sender.id))
                logger.debug(f"{event.sender.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
                break
            except asyncio.TimeoutError:
                continue


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.run_until_disconnected()
