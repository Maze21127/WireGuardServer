import asyncio
import re
from datetime import datetime

from telethon import TelegramClient, events, Button

from UserManager import UserManager
from exceptions import NoFreeIpAddress
from settings import *

bot = TelegramClient("WireGuardVPN", API_ID, API_HASH).start(bot_token=BOT_TOKEN)
manager = UserManager()
manager.create_database_connection()


instruction = "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
subscribe = "–ü–æ–¥–ø–∏—Å–∫–∞"
configurations = "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
create_configuration = "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª"
show_configurations = "–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
create_new_configuration = "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
delete_configuration = "–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
main_menu = "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"
support = "–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
back = "–ù–∞–∑–∞–¥"
cancel = "–û—Ç–º–µ–Ω–∞"

black_list = [instruction, subscribe, configurations, create_configuration, show_configurations, delete_configuration,
              main_menu, support, back, cancel]

keyboard = [
    [
        Button.text(instruction, resize=True),
        Button.text(subscribe, resize=True)
    ],
    [
        Button.text(configurations, resize=True),
        Button.text(support, resize=True)
    ]
]

configs_keyboard = [
    [Button.text(show_configurations)],
    [Button.text(create_new_configuration)],
    [Button.text(delete_configuration)],
    [Button.text(main_menu)]
]


@bot.on(events.NewMessage(pattern="/start"))
async def start(event):
    print(event.sender)
    if event.sender.first_name is not None:
        user = event.sender.first_name
    elif event.sender.username is not None:
        user = event.sender.username
    else:
        user = "–î—Ä—É–∂–∏—â–µ"
    await event.respond(f"–ü—Ä–∏–≤–µ—Ç {user}, –¥–∞–≤–∞–π —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN\n\n"
                        f"[INFO] –ë–û–¢ –ù–ê–•–û–î–ò–¢–°–Ø –í –°–¢–ê–î–ò–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø.\n"
                        f"–ü—Ä–æ—Å—å–±–∞ –ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏",
                        buttons=keyboard)


@bot.on(events.NewMessage(pattern=instruction))
async def callback(event):
    await bot.send_message(event.chat_id, "1. –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
                                          "üì± [App Store](https://apps.apple.com/ru/app/wireguard/id1441195209)\n"
                                          "üìû [Google Play](https://play.google.com/store/apps/details?id=com.wireguard"
                                          ".android)\n"
                                          "2. –°–∫–∞—á–∞—Ç—å –≤–∞—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª\n"
                                          "3. –î–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", link_preview=False, buttons=Button.clear())
    await bot.send_file(event.chat_id, [
        "Screenshots/import_tunnel.jpg",
        "Screenshots/from_file.jpg",
        "Screenshots/allow_vpn.jpg"
    ])
    await event.respond(f"–î–ª—è Android –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞")
    await event.respond(f"–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", buttons=keyboard)


@bot.on(events.NewMessage(pattern=subscribe))
async def callback(event):
    price = manager.get_price_by_id(event.peer_id.user_id)
    if price == 2147483647:
        price_message = "–£ –≤–∞—Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞."
    else:
        price_message = f"–°—Ç–æ–∏–º–æ—Å—Ç—å - {price}—Ä –≤ –º–µ—Å—è—Ü."
    await event.respond("–í–≤–∏–¥—É —Ç–æ–≥–æ, —á—Ç–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –Ω–∞—á–∞–ª–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö VPN-—Å–µ—Ä–≤–∏—Å–æ–≤, –±—ã–ª–æ "
                        "–ø—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ, –Ω–µ –¥–µ–ª–∞—Ç—å –≥–æ–¥–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É, –∞ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π\n")
    await event.respond(f"{price_message}\n"
                        "–ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –¥–æ 5 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–∞ 5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö")
    await event.respond(f"–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", buttons=keyboard)


@bot.on(events.NewMessage(pattern=configurations))
async def callback(event):
    if not manager.is_user_active(event.peer_id.user_id):
        await bot.send_message(event.chat_id, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", buttons=configs_keyboard)
        return
    await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_keyboard)


@bot.on(events.NewMessage(pattern=show_configurations))
async def callback(event):
    configs = manager.get_configs_list_for_user(event.peer_id.user_id)

    if len(configs) == 0:
        await bot.send_message(event.chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", buttons=configs_keyboard)
        return

    configs_buttons = [[Button.text(name.split(".conf")[0], resize=True)] for name in configs]
    configs_buttons.append([Button.text("–ù–∞–∑–∞–¥", resize=True)])
    await bot.send_message(event.chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", buttons=configs_buttons)

    while True:
        async with bot.conversation(event.chat_id) as conv:
            await conv.send_message("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª")
            try:
                answer = await conv.get_response()
                answer_message = answer.message
            except asyncio.TimeoutError:
                answer_message = "–ù–∞–∑–∞–¥"
        if answer_message in black_list:
            await event.respond(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_keyboard)
            break
        config, qr_code = manager.create_user_config_by_name(answer_message, event.peer_id.user_id)
        await bot.send_file(event.chat_id, qr_code)
        await bot.send_file(event.chat_id, config)
        break
    await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_keyboard)
        #await bot.send_message(event.chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", buttons=configs_keyboard)


@bot.on(events.NewMessage(pattern=create_new_configuration))
async def callback(event):
    configs = manager.get_configs_list_for_user(event.peer_id.user_id)

    if len(configs) == 5:
        await bot.send_message(event.chat_id, "–£ –≤–∞—Å —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π", buttons=configs_keyboard)
        return

    while True:
        async with bot.conversation(event.chat_id) as conv:
            await conv.send_message("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)")
            try:
                answer = await conv.get_response()
                config_name = answer.message
            except asyncio.TimeoutError:
                await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_keyboard)
                break

            if config_name in black_list:
                await event.respond(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_keyboard)
                break

            if len(config_name) >= 254:
                await conv.send_message("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ")
                break

            if not re.match(r"^[a-zA-Z0-9]+$", config_name):
                await conv.send_message("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã, —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã")
                break

            try:
                manager.create_new_config(config_name, event.peer_id.user_id)
            except NoFreeIpAddress:
                await conv.send_message("–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –ø–∏—Å—å–º–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                await bot.send_message(SUPPORT_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.peer_id.user_id} –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥,"
                                                   f"–∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å IP-–∞–¥—Ä–µ—Å–∞")
                break

            config, qr_code = manager.create_user_config_by_name(config_name, event.peer_id.user_id)
            await conv.send_message("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            await bot.send_file(event.chat_id, qr_code)
            await bot.send_file(event.chat_id, config)
            manager.delete_user_config(config_name)
            break
    await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_keyboard)


@bot.on(events.NewMessage(pattern=delete_configuration))
async def callback(event):
    configs = manager.get_configs_list_for_user(event.peer_id.user_id)
    configs_buttons = [[Button.text(name.split(".conf")[0], resize=True)] for name in configs]
    configs_buttons.append([Button.text("–ù–∞–∑–∞–¥", resize=True)])
    await bot.send_message(event.chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", buttons=configs_buttons)

    while True:
        async with bot.conversation(event.chat_id) as conv:
            await conv.send_message("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª")
            try:
                answer = await conv.get_response()
                answer_message = answer.message
                if answer_message in black_list:
                    await event.respond(f"–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", buttons=configs_keyboard)
                    break
            except asyncio.TimeoutError:
                await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_keyboard)
                break

        manager.delete_user_config_by_name(answer_message, event.peer_id.user_id)
        await event.respond(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {answer_message} —É–¥–∞–ª–µ–Ω–∞", buttons=configs_keyboard)
        break


@bot.on(events.NewMessage(pattern=main_menu))
async def callback(event):
    await event.respond(f"–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", buttons=keyboard)


@bot.on(events.NewMessage(pattern=support))
async def callback(event):
    async with bot.conversation(event.chat_id) as conv:
        await conv.send_message("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                                buttons=Button.text("–û—Ç–º–µ–Ω–∞", resize=True))
        while True:
            try:
                answer = await conv.get_response()
                if answer.message in black_list:
                    await event.respond(f"–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", buttons=keyboard)
                    break
                answer.date = datetime.now()
                message = f"ID: {answer.peer_id.user_id}\n{answer.date.strftime('%d.%m.%y %H:%M:%S')}\n" \
                          f"{answer.message}"
                await bot.send_message(SUPPORT_ID, message)
                await event.respond("–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", buttons=keyboard)
                break
            except asyncio.TimeoutError:
                continue


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.run_until_disconnected()

