import asyncio
import random
import re

from telethon import TelegramClient, events, Button, types

from Entities import *
from UserManager import UserManager
from exceptions import NoFreeIpAddress
from settings import *


def get_payment_string() -> str:
    chars = '+-/*!&$#?=@<>abcdefghijklnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'
    LENGTH = 16
    return "".join([random.choice(chars) for _ in range(LENGTH)])


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø–ª–∞—Ç–æ–π
def generate_invoice(price_label: str, price_amount: int, currency: str, title: str,
                     description: str, payload: str, start_param: str) -> types.InputMediaInvoice:
    price = types.LabeledPrice(label=price_label, amount=price_amount)  # label - just a text, amount=10000 means 100.00
    invoice = types.Invoice(
        currency=currency,  # currency like USD
        prices=[price],  # there could be a couple of prices.
        test=True,  # if you're working with test token

        #  next params are saying for themselves
        name_requested=False,
        phone_requested=False,
        email_requested=False,
        shipping_address_requested=False,
        flexible=False,
        phone_to_provider=False,
        email_to_provider=False
    )

    return types.InputMediaInvoice(
        title=title,
        description=description,
        invoice=invoice,
        payload=payload.encode("UTF-8"),  # payload, which will be sent to next 2 handlers
        provider=SBERBANK_TEST_TOKEN,
        provider_data=types.DataJSON("{}"),  # honestly, no idea.
        start_param=start_param,
        # start_param will be passed with UpdateBotPrecheckoutQuery,
        # I don't really know why is it needed, I guess like payload.
    )


bot = TelegramClient("WireGuardVPN_newBot", API_ID, API_HASH).start(bot_token=BOT_TOKEN)
manager = UserManager()
manager.create_database_connection()

instruction = "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
subscribe = "–ü–æ–¥–ø–∏—Å–∫–∞"
configurations = "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
create_configuration = "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª"
show_configurations = "–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
create_new_configuration = "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
delete_configuration = "–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
main_menu = "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"
support = "–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
back = "–ù–∞–∑–∞–¥"
cancel = "–û—Ç–º–µ–Ω–∞"
start_subscribe = "–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
price_button = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
admin = "–ê–¥–º–∏–Ω"
payment_requests = "–ó–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É"

black_list = [instruction, subscribe, configurations, create_configuration, show_configurations, delete_configuration,
              main_menu, support, back, cancel, start_subscribe, price_button, '/support', admin, payment_requests]

keyboard = [
    [
        Button.text(instruction, resize=True),
        Button.text(subscribe, resize=True)
    ],
    [
        Button.text(configurations, resize=True),
    ]
]

admin_keyboard = [
    [
        Button.text(instruction, resize=True),
        Button.text(subscribe, resize=True)
    ],
    [
        Button.text(configurations, resize=True),
    ],
    [
        Button.text(admin, resize=True),
    ]
]

admin_panel = [
    [
        Button.text(payment_requests, resize=True),
        Button.text(main_menu, resize=True)
    ]
]

configs_keyboard = [
    [Button.text(show_configurations)],
    [Button.text(create_new_configuration)],
    [Button.text(delete_configuration)],
    [Button.text(main_menu)]
]

subscribe_keyboard = [
    [Button.text(price_button, resize=True)],
    [Button.text(start_subscribe, resize=True)],
    [Button.text(main_menu, resize=True)],

]


def get_keyboard(tg_id: int) -> list:
    if tg_id == ADMIN_ID:
        return admin_keyboard
    else:
        return keyboard


@bot.on(events.NewMessage(pattern="/start"))
async def start(event):
    user = event.sender
    tg_user: TgUser = TgUser(user.id, user.username, user.first_name, user.last_name, user.phone)
    print(tg_user)
    manager.add_new_user(tg_user)
    if event.sender.first_name is not None:
        user = event.sender.first_name
    elif event.sender.username is not None:
        user = event.sender.username
    else:
        user = "–î—Ä—É–∂–∏—â–µ"
    await event.respond(f"–ü—Ä–∏–≤–µ—Ç, {user}, –¥–∞–≤–∞–π —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN\n\n"
                        f"[INFO] –ë–û–¢ –ù–ê–•–û–î–ò–¢–°–Ø –í –°–¢–ê–î–ò–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø.\n"
                        f"–ü—Ä–æ—Å—å–±–∞ –ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏",
                        buttons=get_keyboard(tg_user.tg_id))
    print(f"{datetime.datetime.now()} >> {tg_user.tg_id} –Ω–∞–∂–∞–ª /start")


@bot.on(events.NewMessage(pattern=instruction))
async def callback(event):
    await bot.send_message(event.chat_id, "1. –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
                                          "üì± [App Store](https://apps.apple.com/ru/app/wireguard/id1441195209)\n"
                                          "üìû [Google Play](https://play.google.com/store/apps/details?id=com.wireguard"
                                          ".android)\n"
                                          "2. –°–∫–∞—á–∞—Ç—å –≤–∞—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª\n"
                                          "3. –î–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", link_preview=False, buttons=Button.clear())
    await bot.send_file(event.chat_id, [
        "Screenshots/import_tunnel.jpg",
        "Screenshots/from_file.jpg",
        "Screenshots/allow_vpn.jpg"
    ])
    await event.respond(f"–î–ª—è Android –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞")
    await event.respond(f"–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", buttons=get_keyboard(event.sender.id))
    print(f"{datetime.datetime.now()} >> {event.sender.id} –Ω–∞–∂–∞–ª –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")


@bot.on(events.NewMessage(pattern=price_button))
async def callback(event):
    user_subscription: UserSubscription = manager.get_subscription_info_by_id(event.peer_id.user_id)
    if user_subscription.price == 2147483647:
        price_message = "–£ –≤–∞—Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n"
    else:
        price_message = f"**–°—Ç–æ–∏–º–æ—Å—Ç—å - {user_subscription.price}—Ä –≤ –º–µ—Å—è—Ü.**\n"

        if user_subscription.end_date is not None:
            price_message += f"**–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {user_subscription.end_date.strftime('%d.%m.%y')}\n"

    await event.respond("–í–≤–∏–¥—É —Ç–æ–≥–æ, —á—Ç–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –Ω–∞—á–∞–ª–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö VPN-—Å–µ—Ä–≤–∏—Å–æ–≤, –±—ã–ª–æ "
                        "–ø—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ, –Ω–µ –¥–µ–ª–∞—Ç—å –≥–æ–¥–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É, –∞ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π\n")
    await event.respond(f"{price_message}"
                        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ - **{user_subscription.max_configs}**.\n"
                        f"–ù–∞ –∫–∞–∂–¥–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª.")

    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è
    # if user_subscription.price != 2147483647:
    #     await event.respond(f"–§—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–∑–∂–µ")

    await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=subscribe_keyboard)
    print(f"{datetime.datetime.now()} >> {event.sender.id} –Ω–∞–∂–∞–ª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")


# @bot.on(events.Raw(types.UpdateNewMessage))
# async def payment_received_handler(event):
#     if isinstance(event.message.action, types.MessageActionPaymentSentMe):
#         payment: types.MessageActionPaymentSentMe = event.message.action
#         print(payment)
#         print(event.message.peer_id.user_id)
#         print("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞")
#         if payment.payload.decode("UTF-8") == '1MonthSubscribe':
#             await bot.send_message(event.message.peer_id.user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏,"
#                                                                   "—Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥")
#
#         raise events.StopPropagation


#
# @bot.on(events.Raw(types.UpdateBotPrecheckoutQuery))
# async def payment_pre_checkout_handler(event: types.UpdateBotPrecheckoutQuery):
#     if event.payload.decode("UTF-8") == '1MonthSubscribe':
#         #  so we have to confirm payment
#         await bot(
#             functions.messages.SetBotPrecheckoutResultsRequest(
#                 query_id=event.query_id,
#                 success=True,
#                 error=None
#             )
#         )
#
#     else:
#         # for example, something went wrong (whatever reason). We can tell customer about that:
#         await bot(
#             functions.messages.SetBotPrecheckoutResultsRequest(
#                 query_id=event.query_id,
#                 success=False,
#                 error="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
#             )
#         )
#
#     raise events.StopPropagation


@bot.on(events.NewMessage(pattern=subscribe))
async def callback(event):
    await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=subscribe_keyboard)
    print(f"{datetime.datetime.now()} >> {event.sender.id} –Ω–∞–∂–∞–ª –ü–æ–¥–ø–∏—Å–∫–∞")


@bot.on(events.NewMessage(pattern=start_subscribe))
async def callback(event):
    user_subscription: UserSubscription = manager.get_subscription_info_by_id(event.peer_id.user_id)

    if user_subscription.price == 2147483647:
        await event.respond("–£ –≤–∞—Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –Ω–∏—á–µ–≥–æ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ", buttons=subscribe_keyboard)
        return

    if manager.is_user_have_payment_request(event.peer_id.user_id):
        print(f"{datetime.datetime.now()} >> {event.sender.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —Å–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–Ω—É –∑–∞—è–≤–∫—É")
        return await event.respond("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞", buttons=subscribe_keyboard)

    random_string = get_payment_string()
    payment_string = f"{event.peer_id.user_id}/{random_string}"
    date = datetime.datetime.now()

    message = f"ID: {event.message.peer_id.user_id}\n{date.strftime('%d.%m.%y %H:%M:%S')}\n" \
              f"–û–ü–õ–ê–¢–ê: {payment_string}"

    await bot.send_message(SUPPORT_ID, message)
    await event.respond(f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {user_subscription.price} RUB –ø–æ –Ω–æ–º–µ—Ä—É {SBERBANK_NUMBER}, "
                        f"—É–∫–∞–∑–∞–≤ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É", buttons=subscribe_keyboard)
    await event.respond(
        f"{payment_string}", buttons=subscribe_keyboard)

    manager.create_payment_request(event.message.peer_id.user_id, random_string)
    print(f"{datetime.datetime.now()} >> {event.sender.id} –°–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É")

    # await bot.send_message(event.chat_id, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", buttons=configs_keyboard)

    # await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_keyboard)


# @bot.on(events.NewMessage(pattern=start_subscribe))
# async def callback(event):
#     user_subscription: UserSubscription = manager.get_subscription_info_by_id(event.peer_id.user_id)
#     if user_subscription.price == 2147483647:
#         await event.respond("–£ –≤–∞—Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –Ω–∏—á–µ–≥–æ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ", buttons=subscribe_keyboard)
#         return
#     file = generate_invoice("Pay", user_subscription.price, "RUB", "–ü–æ–¥–ø–∏—Å–∫–∞", "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü",
#                             "1MonthSubscribe", "abc")
#     await bot.send_file(event.chat_id, file)
#     # await bot.send_message(event.chat_id, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", buttons=configs_keyboard)
#
#     # await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_keyboard)


@bot.on(events.NewMessage(pattern=configurations))
async def callback(event):
    if not manager.is_user_active(event.peer_id.user_id):
        return await bot.send_message(event.chat_id, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                                      buttons=get_keyboard(event.peer_id.user_id))
    await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_keyboard)
    print(f"{datetime.datetime.now()} >> {event.sender.id} –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")


@bot.on(events.NewMessage(pattern=show_configurations))
async def callback(event):
    configs = manager.get_configs_list_for_user(event.peer_id.user_id)

    if len(configs) == 0:
        await bot.send_message(event.chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", buttons=configs_keyboard)
        print(
            f"{datetime.datetime.now()} >> {event.sender.id} –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —É –Ω–µ–≥–æ –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
        return

    configs_buttons = [[Button.text(name.split(".conf")[0], resize=True)] for name in configs]
    configs_buttons.append([Button.text("–ù–∞–∑–∞–¥", resize=True)])
    await bot.send_message(event.chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", buttons=configs_buttons)


    while True:
        async with bot.conversation(event.chat_id) as conv:
            await conv.send_message("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª")
            print(f"{datetime.datetime.now()} >> {event.sender.id} –Ω–∞–∂–∞–ª –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
            try:
                answer = await conv.get_response()
                answer_message = answer.message
            except asyncio.TimeoutError:
                answer_message = "–ù–∞–∑–∞–¥"
        if answer_message in black_list:
            await event.respond(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_keyboard)
            break
        config, qr_code = manager.create_user_config_by_name(answer_message, event.peer_id.user_id)
        await bot.send_file(event.chat_id, qr_code)
        await bot.send_file(event.chat_id, config)
        print(f"{datetime.datetime.now()} >> {event.sender.id} –ø–æ–ª—É—á–∏–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        break
    await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_keyboard)
    # await bot.send_message(event.chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", buttons=configs_keyboard)


@bot.on(events.NewMessage(pattern=create_new_configuration))
async def callback(event):
    configs = manager.get_configs_list_for_user(event.peer_id.user_id)
    limit = manager.get_subscription_info_by_id(event.peer_id.user_id)

    if len(configs) == limit.max_configs:
        print(f"{datetime.datetime.now()} >> {event.sender.id} –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º–∞–∫—Å–∏–º—É–º–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
        await bot.send_message(event.chat_id, "–£ –≤–∞—Å —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π",
                               buttons=configs_keyboard)
        return

    while True:
        async with bot.conversation(event.chat_id) as conv:
            await conv.send_message("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)")
            try:
                answer = await conv.get_response()
                config_name = answer.message
            except asyncio.TimeoutError:
                await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_keyboard)
                break

            if config_name in black_list:
                await event.respond(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_keyboard)
                break

            if len(config_name) >= 254:
                await conv.send_message("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ")
                break

            if not re.match(r"^[a-zA-Z0-9]+$", config_name):
                await conv.send_message("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã, —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã")
                print(f"{datetime.datetime.now()} >> {event.sender.id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                break

            try:
                manager.create_new_config(config_name, event.peer_id.user_id)
            except NoFreeIpAddress:
                await conv.send_message("–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –ø–∏—Å—å–º–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                await bot.send_message(SUPPORT_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.peer_id.user_id} –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥,"
                                                   f"–∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å IP-–∞–¥—Ä–µ—Å–∞")
                break

            config, qr_code = manager.create_user_config_by_name(config_name, event.peer_id.user_id)
            await conv.send_message("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            await bot.send_file(event.chat_id, qr_code)
            await bot.send_file(event.chat_id, config)
            print(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {event.peer_id.user_id}")
            print(f"{datetime.datetime.now()} >> {event.sender.id} —Å–æ–∑–¥–∞–ª –∏ –ø–æ–ª—É—á–∏–ª –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª")
            manager.delete_user_config(config_name)
            break
    await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_keyboard)


@bot.on(events.NewMessage(pattern=delete_configuration))
async def callback(event):
    configs = manager.get_configs_list_for_user(event.peer_id.user_id)
    configs_buttons = [[Button.text(name.split(".conf")[0], resize=True)] for name in configs]
    configs_buttons.append([Button.text("–ù–∞–∑–∞–¥", resize=True)])
    await bot.send_message(event.chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", buttons=configs_buttons)
    print(f"{datetime.datetime.now()} >> {event.sender.id} –∑–∞—Ö–æ—Ç–µ–ª —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª")
    while True:
        async with bot.conversation(event.chat_id) as conv:
            await conv.send_message("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª")
            try:
                answer = await conv.get_response()
                answer_message = answer.message
                if answer_message in black_list:
                    await event.respond(f"–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", buttons=configs_keyboard)
                    break
            except asyncio.TimeoutError:
                await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_keyboard)
                break

        manager.delete_user_config_by_name(answer_message, event.peer_id.user_id)
        await event.respond(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {answer_message} —É–¥–∞–ª–µ–Ω–∞", buttons=configs_keyboard)
        print(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {answer_message} —É–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {event.peer_id.user_id}")
        print(f"{datetime.datetime.now()} >> {event.sender.id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª {answer_message}")
        break


@bot.on(events.NewMessage(pattern=main_menu))
async def callback(event):
    await event.respond(f"–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", buttons=get_keyboard(event.sender.id))
    print(f"{datetime.datetime.now()} >> {event.sender.id} –ø–æ–ø–∞–ª –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")


@bot.on(events.NewMessage(pattern=admin))
async def callback(event):
    if event.sender.id != ADMIN_ID:
        return await event.respond(f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", buttons=get_keyboard(event.sender.id))
    await event.respond(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=admin_panel)


@bot.on(events.NewMessage(pattern=payment_requests))
async def callback(event):
    if event.sender.id != ADMIN_ID:
        return await event.respond(f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", buttons=get_keyboard(event.sender.id))

    # –ë–µ—Ä–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
    # payments = manager.get_configs_list_for_user(event.peer_id.user_id)
    payments = manager.get_payment_requests()

    payments_keyboard = [[Button.text(f"{payment[0]}/{payment[2]}\n{payment[1].strftime('%d.%m.%y %H:%M:%S')}",
                                      resize=True)] for payment in payments]
    payments_keyboard.append([Button.text("–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", resize=True)])

    # await bot.send_message(event.chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", buttons=payments_keyboard)

    while True:
        async with bot.conversation(event.chat_id) as conv:
            await conv.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", buttons=payments_keyboard)
            try:
                answer = await conv.get_response()
                answer_message = answer.message
                if answer_message in black_list:
                    return await event.respond(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=admin_panel)
            except asyncio.TimeoutError:
                await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=payments_keyboard)
                break
        tg_id = answer_message.split("/")[0]
        manager.accept_payment_request(tg_id)
        await bot.send_message(tg_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å")
        await event.respond("–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞")
        break

    await event.respond(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=admin_panel)


@bot.on(events.NewMessage(pattern="/support"))
async def callback(event):
    async with bot.conversation(event.chat_id) as conv:
        await conv.send_message("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                                buttons=Button.text("–û—Ç–º–µ–Ω–∞", resize=True))
        while True:
            try:
                answer = await conv.get_response()
                if answer.message in black_list:
                    await event.respond(f"–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", buttons=get_keyboard(event.sender.id))
                    break
                answer.date = datetime.datetime.now()
                message = f"ID: {answer.peer_id.user_id}\n{answer.date.strftime('%d.%m.%y %H:%M:%S')}\n" \
                          f"{answer.message}"
                await bot.send_message(SUPPORT_ID, message)
                await event.respond("–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", buttons=get_keyboard(event.sender.id))
                print(f"{datetime.datetime.now()} >> {event.sender.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
                break
            except asyncio.TimeoutError:
                continue


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.run_until_disconnected()
