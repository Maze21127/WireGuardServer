import asyncio
import os
from datetime import datetime

from telethon import TelegramClient, events, Button

from settings import *

bot = TelegramClient("WireGuardVPN", API_ID, API_HASH).start(bot_token=BOT_TOKEN)


instruction = "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
payment = "–°—Ç–æ–∏–º–æ—Å—Ç—å"
configurations = "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
create_configuration = "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª"
show_configurations = "–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
create_new_configuration = "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
configs = os.listdir("configs")  # TODO: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –±—Ä–∞—Ç—å—Å—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
main_menu = "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"
support = "–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"

keyboard = [
    [
        Button.text(instruction, resize=True),
        Button.text(payment, resize=True)
    ],
    [
        Button.text(configurations, resize=True),
        Button.text(support, resize=True)
    ]
]

configs_keyboard = [
    [Button.text(show_configurations)],
    [Button.text(create_new_configuration)],
    [Button.text(main_menu)]
]


@bot.on(events.NewMessage(pattern="/start"))
async def start(event):
    await event.respond(f"–ü—Ä–∏–≤–µ—Ç {event.sender.first_name}, –¥–∞–≤–∞–π —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN",
                        buttons=keyboard)


@bot.on(events.NewMessage(pattern=instruction))
async def callback(event):
    await bot.send_message(event.chat_id, "1. –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
                                          "üì± [App Store](https://apps.apple.com/ru/app/wireguard/id1441195209)\n"
                                          "üìû [Google Play](https://play.google.com/store/apps/details?id=com.wireguard"
                                          ".android)\n"
                                          "2. –°–∫–∞—á–∞—Ç—å –≤–∞—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª\n"
                                          "3. –î–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", link_preview=False, buttons=Button.clear())
    await bot.send_file(event.chat_id, [
        "Screenshots/import_tunnel.jpg",
        "Screenshots/from_file.jpg",
        "Screenshots/allow_vpn.jpg"
    ])
    await event.respond(f"–î–ª—è Android –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞")
    await event.respond(f"–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", buttons=keyboard)


@bot.on(events.NewMessage(pattern=payment))
async def callback(event):
    price = 150  # TODO: –°—Ç–æ–∏–º–æ—Å—Ç—å –±—É–¥–µ—Ç –±—Ä–∞—Ç—å—Å—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await event.respond("–í–≤–∏–¥—É —Ç–æ–≥–æ, —á—Ç–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –Ω–∞—á–∞–ª–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö VPN-—Å–µ—Ä–≤–∏—Å–æ–≤, –±—ã–ª–æ "
                        "–ø—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ, –Ω–µ –¥–µ–ª–∞—Ç—å –≥–æ–¥–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É, –∞ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π\n")
    await event.respond(f"–°—Ç–æ–∏–º–æ—Å—Ç—å - {price}—Ä –≤ –º–µ—Å—è—Ü.\n"
                        "–ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –¥–æ 5 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–∞ 5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö")
    await event.respond(f"–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", buttons=keyboard)


@bot.on(events.NewMessage(pattern=configurations))
async def callback(event):
    await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_keyboard)


@bot.on(events.NewMessage(pattern=show_configurations))
async def callback(event):
    configs_buttons = [[Button.text(name.split(".conf")[0], resize=True)] for name in configs]
    configs_buttons.append([Button.text("–ù–∞–∑–∞–¥", resize=True)])
    await bot.send_message(event.chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", buttons=configs_buttons)
    #await bot.delete_messages(event.chat_id, event.message_id)

    while True:
        async with bot.conversation(event.chat_id) as conv:
            await conv.send_message("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª")
            try:
                answer = await conv.get_response()
                answer_message = answer.message
            except asyncio.TimeoutError:
                answer_message = "–ù–∞–∑–∞–¥"
        if answer_message == "–ù–∞–∑–∞–¥":
            await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_keyboard)
            break
        if f"{answer_message}.conf" in configs:
            await bot.send_file(event.chat_id, f"configs/{answer_message}.conf")
            # TODO: –°–¥–µ–ª–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É QR-–ö–æ–¥–∞
            #await bot.send_message(event.chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", buttons=configs_keyboard)
        else:
            return


@bot.on(events.NewMessage(pattern=create_new_configuration))
async def callback(event):
    if len(configs) == 1:
        await bot.send_message(event.chat_id, "–£ –≤–∞—Å —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
        await bot.send_message(event.chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_keyboard)
        return
    while True:
        async with bot.conversation(event.chat_id) as conv:
            await conv.send_message("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–æ 12 —Å–∏–º–≤–æ–ª–æ–≤, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤")
            answer = await conv.get_response()
            if len(answer.message) > 12:
                await conv.send_message("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ")
            else:
                filename = answer.message
                await conv.send_message("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                # TODO: –°–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª, —Å QR-–ö–æ–¥–æ–º
                break
    await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", buttons=configs_keyboard)


@bot.on(events.NewMessage(pattern=main_menu))
async def callback(event):
    await event.respond(f"–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", buttons=keyboard)


@bot.on(events.NewMessage(pattern=support))
async def callback(event):
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    async with bot.conversation(event.chat_id) as conv:
        await conv.send_message("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                                buttons=Button.text("–û—Ç–º–µ–Ω–∞", resize=True))
        while True:
            try:
                answer = await conv.get_response()
                if answer.message in (instruction, payment, configurations, support, "–û—Ç–º–µ–Ω–∞"):
                    await event.respond(f"–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?", buttons=keyboard)
                    break
                answer.date = datetime.now()
                message = f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {answer.chat_id}\n{answer.date.strftime('%d.%m.%y %H:%M:%S')}\n{answer.message}"
                await bot.send_message(SUPPORT_ID, message)
                break
            except asyncio.TimeoutError:
                continue




if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.run_until_disconnected()

